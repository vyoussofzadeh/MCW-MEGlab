%% The CIDMEG project

% Export Association network ROIs into Brainstorm format (.mat)
% Written by MCW group, Youssofzadeh, Vahab <vyoussofzadeh@mcw.edu>
% Latest update: 11/23/2024

%%
% Initial setup: Clear workspace, load scout data, and define regions
clear; clc;

% Define the directory for saving data
export_dir = '/group/bgross/work/CIDMEG/analysis/Pipelines/atlas_AssociationROIs_Brainnetome';

% Load the Brainnetome atlas scout file
% (Ensure the correct file name for your atlas)
sScout = load('scout_Brainnetome_210.mat');

expectedRegions = {...
    'A20cl_L', 'A20cl_R', ...
    'A20cv_L', 'A20cv_R', ...
    'A20il_L', 'A20il_R', ...
    'A20iv_L', 'A20iv_R', ...
    'A20r_L', 'A20r_R', ...
    'A20rv_L', 'A20rv_R', ...
    'A21c_L', 'A21c_R', ...
    'A21r_L', 'A21r_R', ...
    'A22c_L', 'A22c_R', ...
    'A22r_L', 'A22r_R', ...
    'A37dl_L', 'A37dl_R', ...
    'A37elv_L', 'A37elv_R', ...
    'A37lv_L', 'A37lv_R', ...
    'A37mv_L', 'A37mv_R', ...
    'A37vl_L', 'A37vl_R', ...
    'A38l_L', 'A38l_R', ...
    'A38m_L', 'A38m_R', ...
    'A41/42_L', 'A41/42_R', ...
    'TE1.0/TE1.2_L', 'TE1.0/TE1.2_R', ...
    'TI_L', 'TI_R', ...
    'aSTS_L', 'aSTS_R', ...
    'cpSTS_L', 'cpSTS_R', ...
    'rpSTS_L', 'rpSTS_R', ...
    'A7c_L', 'A7c_R', ...
    'A7ip_L', 'A7ip_R', ...
    'A7m_L', 'A7m_R', ...
    'A7pc_L', 'A7pc_R', ...
    'A7r_L', 'A7r_R', ...
    'A39c_L', 'A39c_R', ...
    'A39rd_L', 'A39rd_R', ...
    'A39rv_L', 'A39rv_R', ...
    'A40c_L', 'A40c_R', ...
    'A40rd_L', 'A40rd_R', ...
    'A40rv_L', 'A40rv_R', ...
    'A5l_L', 'A5l_R', ...
    'A5m_L', 'A5m_R'};


% Normalize atlas labels for consistency and ease of comparison
normalizedRegions = cellfun(@(x) strtrim(x), {sScout.Scouts.Label}, 'UniformOutput', false);

% Find indices corresponding to the expected regions
selectedIndices = arrayfun(@(x) find(strcmp(normalizedRegions, expectedRegions{x})), ...
    1:length(expectedRegions), 'UniformOutput', false);

% Display the indices for verification
disp('Indices of selected ROIs:');
for i = 1:length(expectedRegions)
    if isempty(selectedIndices{i})
        fprintf('%s: None found\n', expectedRegions{i});
    else
        fprintf('%s: %s\n', expectedRegions{i}, mat2str(selectedIndices{i}));
    end
end

% Convert selected indices from a cell array to a flat vector
allIndices = cell2mat(selectedIndices(:));
flatIndices = reshape(allIndices.', 1, []);

% Final check to ensure valid indices were found
if isempty(flatIndices)
    error('No valid regions found. Check that expected regions match atlas labels.');
end

% % normalizedRegions = cellfun(@(x) regexprep(x, '[ L|R]$', ''), {sScout.Scouts.Label}, 'UniformOutput', false);
% % disp(normalizedRegions);
% 
% % Normalize labels to ensure consistency and ease of comparison
% normalizedRegions = cellfun(@(x) regexprep(x, '[ L|R]$', ''), {sScout.Scouts.Label}, 'UniformOutput', false);
% normalizedRegions = cellfun(@(x) strtrim(x), normalizedRegions, 'UniformOutput', false);
% 
% % Find indices corresponding to the expected regions
% selectedIndices = arrayfun(@(x) find(strcmp(normalizedRegions, expectedRegions{x})), 1:length(expectedRegions), 'UniformOutput', false);
% 
% % Display the indices for verification
% disp('Indices of selected ROIs:');
% for i = 1:length(expectedRegions)
%     if isempty(selectedIndices{i})
%         fprintf('%s: None found\n', expectedRegions{i});
%     else
%         fprintf('%s: %s\n', expectedRegions{i}, mat2str(selectedIndices{i}));
%     end
% end
% 
% % Convert selected indices from a cell array to a flat vector
% allIndices = cell2mat(selectedIndices(:));
% flatIndices = reshape(allIndices.', 1, []);  % Ensure a single row of indices

%% SAVE ROIS in BS format
% Verify and create the directory if it doesn't exist
if ~exist(export_dir, 'dir')
    fprintf('Creating directory: %s\n', export_dir);
    mkdir(export_dir);
end

% Update the scouts and save the new atlas
newScoutsAll = sScout.Scouts(flatIndices);
newatlas = sScout;
newatlas.Scouts = newScoutsAll;
newatlas.Name = 'Brainnetome_association';
new_atlas_filename = fullfile(export_dir, 'scout_Brainnetome_associationROIs_BS24.mat');

% Save the updated atlas structure
fprintf('Saving new atlas structure to %s\n', new_atlas_filename);
save(new_atlas_filename, '-struct', 'newatlas');
fprintf('Atlas saved successfully.\n');



% List of Brainnetome ROIs of interest
% expectedRegions = {...
%     'A1/2/3ll_L', 'A1/2/3ll_R', 'A1/2/3tonIa_L', 'A1/2/3tonIa_R', ...
%     'A1/2/3tru_L', 'A1/2/3tru_R', 'A1/2/3ulhf_L', 'A1/2/3ulhf_R', ...
%     'A10l_L', 'A10l_R', 'A10m_L', 'A10m_R', 'A11l_L', 'A11l_R', ...
%     'A11m_L', 'A11m_R', 'A12/47l_L', 'A12/47l_R', 'A12/47o_L', ...
%     'A12/47o_R', 'A13_L', 'A13_R', 'A14m_L', 'A14m_R', ...
%     'A20cl_L', 'A20cl_R', 'A20cv_L', 'A20cv_R', 'A20il_L', ...
%     'A20il_R', 'A20iv_L', 'A20iv_R', 'A20r_L', 'A20r_R', ...
%     'A20rv_L', 'A20rv_R', 'A21c_L', 'A21c_R', 'A21r_L', ...
%     'A21r_R', 'A22c_L', 'A22c_R', 'A22r_L', 'A22r_R', ...
%     'A23c_L', 'A23c_R', 'A23d_L', 'A23d_R', 'A23v_L', ...
%     'A23v_R', 'A24cd_L', 'A24cd_R', 'A24rv_L', 'A24rv_R', ...
%     'A28/34_L', 'A28/34_R', 'A2_L', 'A2_R', 'A31_L', ...
%     'A31_R', 'A32p_L', 'A32p_R', 'A32sg_L', 'A32sg_R', ...
%     'A35/36c_L', 'A35/36c_R', 'A35/36r_L', 'A35/36r_R', ...
%     'A37dl_L', 'A37dl_R', 'A37elv_L', 'A37elv_R', 'A37lv_L', ...
%     'A37lv_R', 'A37mv_L', 'A37mv_R', 'A37vl_L', 'A37vl_R', ...
%     'A38l_L', 'A38l_R', 'A38m_L', 'A38m_R', 'A39c_L', ...
%     'A39c_R', 'A39rd_L', 'A39rd_R', 'A39rv_L', 'A39rv_R', ...
%     'A40c_L', 'A40c_R', 'A40rd_L', 'A40rd_R', 'A40rv_L', ...
%     'A40rv_R', 'A41/42_L', 'A41/42_R', 'A44d_L', 'A44d_R', ...
%     'A44op_L', 'A44op_R', 'A44v_L', 'A44v_R', 'A45c_L', ...
%     'A45c_R', 'A45r_L', 'A45r_R', 'A46_L', 'A46_R', ...
%     'A4hf_L', 'A4hf_R', 'A4ll_L', 'A4ll_R', 'A4t_L', ...
%     'A4t_R', 'A4tl_L', 'A4tl_R', 'A4ul_L', 'A4ul_R', ...
%     'A5l_L', 'A5l_R', 'A5m_L', 'A5m_R', 'A6cdl_L', ...
%     'A6cdl_R', 'A6cvl_L', 'A6cvl_R', 'A6dl_L', 'A6dl_R', ...
%     'A6m_L', 'A6m_R', 'A6vl_L', 'A6vl_R', 'A7c_L', ...
%     'A7c_R', 'A7ip_L', 'A7ip_R', 'A7m_L', 'A7m_R', ...
%     'A7pc_L', 'A7pc_R', 'A7r_L', 'A7r_R', 'A8dl_L', ...
%     'A8dl_R', 'A8m_L', 'A8m_R', 'A8vl_L', 'A8vl_R', ...
%     'A9/46d_L', 'A9/46d_R', 'A9/46v_L', 'A9/46v_R', ...
%     'A9l_L', 'A9l_R', 'A9m_L', 'A9m_R', 'G_L', 'G_R', ...
%     'IFJ_L', 'IFJ_R', 'IFS_L', 'IFS_R', 'OPC_L', 'OPC_R', ...
%     'TE1.0/TE1.2_L', 'TE1.0/TE1.2_R', 'TH_L', 'TH_R', ...
%     'TI_L', 'TI_R', 'TL_L', 'TL_R', 'V5/MT+_L', 'V5/MT+_R', ...
%     'aSTS_L', 'aSTS_R', 'cCunG_L', 'cCunG_R', 'cLinG_L', ...
%     'cLinG_R', 'cpSTS_L', 'cpSTS_R', 'dIa_L', 'dIa_R', ...
%     'dId_L', 'dId_R', 'dIg_L', 'dIg_R', 'dmPOS_L', ...
%     'dmPOS_R', 'iOccG_L', 'iOccG_R', 'lsOccG_L', 'lsOccG_R', ...
%     'mOccG_L', 'mOccG_R', 'msOccG_L', 'msOccG_R', ...
%     'rCunG_L', 'rCunG_R', 'rLinG_L', 'rLinG_R', ...
%     'rpSTS_L', 'rpSTS_R', 'vIa_L', 'vIa_R', ...
%     'vId/vIg_L', 'vId/vIg_R', 'vmPOS_L', 'vmPOS_R'};
